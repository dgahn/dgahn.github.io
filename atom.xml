<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-31T13:58:44.508Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>안덕기</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java - 변수(Primitive)와 메모리 사용</title>
    <link href="http://yoursite.com/2019/07/31/02-java-variable/"/>
    <id>http://yoursite.com/2019/07/31/02-java-variable/</id>
    <published>2019-07-31T13:58:44.508Z</published>
    <updated>2019-07-31T13:58:44.508Z</updated>
    
    <content type="html"><![CDATA[<h2 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h2><p>회사에서 lombok을 쓰다보니 원시 타입을 잘 사용하지 않아 생각이 나질 않는다. 한번 정리할 겸 해서 블로그에 올려본다.</p><br><h2 id="종류"><a href="#종류" class="headerlink" title="종류"></a>종류</h2><p>Java의 Primitive(원시)타입은 총 8가지가 있다.</p><table><thead><tr><th align="center">기본 타입</th><th align="center">메모리 사용 크기</th></tr></thead><tbody><tr><td align="center">byte</td><td align="center">1 byte / 8 bit</td></tr><tr><td align="center">char</td><td align="center">2 byte / 16 bit</td></tr><tr><td align="center">short</td><td align="center">2 byte / 16 bit</td></tr><tr><td align="center">int</td><td align="center">4 byte / 32 bit</td></tr><tr><td align="center">long</td><td align="center">8 byte / 64 bit</td></tr><tr><td align="center">float</td><td align="center">4 byte / 32 bit</td></tr><tr><td align="center">double</td><td align="center">8 byte / 64 bit</td></tr><tr><td align="center">boolean</td><td align="center">1 byte / 8 bit</td></tr></tbody></table><br><h2 id="메모리-사용"><a href="#메모리-사용" class="headerlink" title="메모리 사용"></a>메모리 사용</h2><p>모든 프로그램은 아래와 같은 방식으로 메모리를 분리해서 사용한다.</p><p><img src="https://i.imgur.com/tHgmkma.png" alt="2"></p><p><strong>Java</strong>는 데이터 저장 영역을 아래와 같이 더 분류한다.</p><p><img src="https://i.imgur.com/bpzBCzb.png" alt="1"></p><p>Primitive 타입의 변수들은 스택 영역에 값이 직접 할당된다. 그래서 변수를 어떤 타입으로 선언했냐에 따라 이 스택 영역에 해당 변수가 얼마나 많은 크기를 사용하냐가 결정된다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;서론&quot;&gt;&lt;a href=&quot;#서론&quot; class=&quot;headerlink&quot; title=&quot;서론&quot;&gt;&lt;/a&gt;서론&lt;/h2&gt;&lt;p&gt;회사에서 lombok을 쓰다보니 원시 타입을 잘 사용하지 않아 생각이 나질 않는다. 한번 정리할 겸 해서 블로그에 올려본다.&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java - 자바 개발 환경</title>
    <link href="http://yoursite.com/2019/07/31/01-java-jdk/"/>
    <id>http://yoursite.com/2019/07/31/01-java-jdk/</id>
    <published>2019-07-31T08:55:03.971Z</published>
    <updated>2019-07-31T08:55:03.971Z</updated>
    
    <content type="html"><![CDATA[<h2 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h2><p>자바의 가장 큰 장점 중의 하나는 “Write once, run anywhere.(한 번 작성하면 어디서든 실행된다.)” 이다. 이 것을 가능하게 해주는 것은 자바가 가지는 특별한 개발 환경 덕분이다. 자바의 세계는 아래와 같은 3가지 도구로 구성되어 있다.</p><ul><li><p>JVM(Java Virtual Machine) : 자바 가상 기계</p></li><li><p>JRE(Java Runtime Environment) : 자바 실행 환경</p></li><li><p>JDK(Java Development Kit) : 자바 개발 도구</p></li></ul><h2 id="JVM-JRE-JDK-관계"><a href="#JVM-JRE-JDK-관계" class="headerlink" title="JVM, JRE, JDK 관계"></a>JVM, JRE, JDK 관계</h2><ul><li><p>JRE = JVM + 표준 클래스 라이브러리</p></li><li><p>JDK = JRE + 개발에 필요한 도구</p></li></ul><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><p>JVM은 컴퓨터로 따지면 물리적인 기계에 해당한다. 자바가 실행할 수 있도록 가상의 공간을 내 컴퓨터에 할당한다. Java 소스 코드를 javac 컴파일러를 통해서 컴파일을 하면 바이트 코드로 변환이 되는데 이 때, 이 바이트 코드를 JVM이 JIT 컴파일 방식으로 코드를 실행한다. (JIT: 실행하는 부분만 필요한 시점에 컴파일 하는 방식)</p><h2 id="JRE"><a href="#JRE" class="headerlink" title="JRE"></a>JRE</h2><p>Java Runtime Environment. 말 그대로 자바를 실행할 수 있는 환경을 제공해준다. 예를 들어, 바이트 코드로 전환된 코드를 JVM에게 전달(적재)하는 역할을 JRE에 있는 Java class loader가 해준다.</p><h2 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h2><p>JRE, Java 바이트 코드 컴파일러, Java 디버거등으로 구성되어 있다. 실제로 Java를 통해서 개발을 할 때 필요한 도구등을 제공해준다. 간단하게 생각하면 System.out.println()이 JDK에서 제공하는 표준 라이브러리 중 하나인 java.lang에 속한 메소드 중 하나이다.</p><p>참고 자료</p><ul><li><a href="https://namu.wiki/w/Java%20Virtual%20Machine" rel="external nofollow noopener noreferrer" target="_blank">https://namu.wiki/w/Java%20Virtual%20Machine</a></li><li><a href="http://www.hanbit.co.kr/store/books/look.php?p_code=B1460673937" rel="external nofollow noopener noreferrer" target="_blank">이것이 자바다.</a> </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;서론&quot;&gt;&lt;a href=&quot;#서론&quot; class=&quot;headerlink&quot; title=&quot;서론&quot;&gt;&lt;/a&gt;서론&lt;/h2&gt;&lt;p&gt;자바의 가장 큰 장점 중의 하나는 “Write once, run anywhere.(한 번 작성하면 어디서든 실행된다.)” 이다
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo로 블로그 만들기</title>
    <link href="http://yoursite.com/2019/07/30/00-hexo-blog/"/>
    <id>http://yoursite.com/2019/07/30/00-hexo-blog/</id>
    <published>2019-07-30T08:57:27.436Z</published>
    <updated>2019-07-30T08:57:27.436Z</updated>
    
    <content type="html"><![CDATA[<h2 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h2><p>블로그를 만들고 싶다는 생각에 인터넷을 찾아서 보았다.<br><del>gitlab에서 한번 만든적이 있는데 거의 사용하지 않고 있다.</del> 만들면서 참고한 사이트가 있다.<br>블로그에서는 친절하게 설명을 해주고 있는데 나는 정말 간단하게 명령어를 순서대로 나열할 예정이다. 그러니 자세한 설명을 듣고 싶은 사람은 <a href="https://juicyjusung.github.io/2019/01/23/hexo/Hexo-github-pages%EB%A1%9C-%EA%B7%B8%EB%9F%B4%EC%8B%B8%ED%95%9C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0-1/" rel="external nofollow noopener noreferrer" target="_blank">링크</a>를 참고하길 바란다.<br>정말 설명을 잘해주셔서 블로그를 띄우는데 많은 도움이 되었다. 다시한번 말하지만 상세한 설정법을 알고 싶으면 링크를 찾아가서 하는 것을 추천한다.</p><h2 id="Git-amp-npm-install"><a href="#Git-amp-npm-install" class="headerlink" title="Git &amp; npm install"></a>Git &amp; npm install</h2><ul><li><a href="https://nodejs.org/ko/download/" rel="external nofollow noopener noreferrer" target="_blank">Node.js 설치</a></li><li><a href="https://git-scm.com/downloads" rel="external nofollow noopener noreferrer" target="_blank">Git 설치</a></li></ul><h2 id="hexo-설치"><a href="#hexo-설치" class="headerlink" title="hexo 설치"></a>hexo 설치</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -g</span><br><span class="line">$ hexo -v</span><br></pre></td></tr></table></figure><h2 id="hexo-blog-init"><a href="#hexo-blog-init" class="headerlink" title="hexo blog init"></a>hexo blog init</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init hexo-blog(프로젝트 명)</span><br></pre></td></tr></table></figure><h2 id="hexo-실행"><a href="#hexo-실행" class="headerlink" title="hexo 실행"></a>hexo 실행</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><h2 id="새로운-테마-적용"><a href="#새로운-테마-적용" class="headerlink" title="새로운 테마 적용"></a>새로운 테마 적용</h2><p>새로운 테마를 적용하기전에 모듈을 몇개 다운 받는다. 무슨 모듈인지는 모르겠다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i hexo-generator-json-content --save &amp;&amp; npm i --save hexo-wordcount</span><br></pre></td></tr></table></figure><p>새로운 테마를 찾아서 클론 해온다. 여기선 <a href="http://firework.studio/archer-demo/" rel="external nofollow noopener noreferrer" target="_blank">archer</a>를 사용한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> themes</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/fi3ework/hexo-theme-archer.git</span><br></pre></td></tr></table></figure><p>마지막으로 프로젝트 루트의 <strong>__config.yml</strong>에서 </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">archer</span></span><br></pre></td></tr></table></figure><p>라고 적용하면 새로운 테마 적용은 완성~ 완성된 테마를 구경해보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>배포하는 법에 대해서는 <a href="https://juicyjusung.github.io/2019/01/24/hexo/Hexo-github-pages%EB%A1%9C-%EA%B7%B8%EB%9F%B4%EC%8B%B8%ED%95%9C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0-2/" rel="external nofollow noopener noreferrer" target="_blank">링크</a>을 참고하면 된다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;서론&quot;&gt;&lt;a href=&quot;#서론&quot; class=&quot;headerlink&quot; title=&quot;서론&quot;&gt;&lt;/a&gt;서론&lt;/h2&gt;&lt;p&gt;블로그를 만들고 싶다는 생각에 인터넷을 찾아서 보았다.&lt;br&gt;&lt;del&gt;gitlab에서 한번 만든적이 있는데 거의 사용하지 않고
      
    
    </summary>
    
    
  </entry>
  
</feed>
